version: 2.1
promotion_requires: &promotion_requires [
  dockerlint,
  hadolint,
  orb-tools/pack,
  test_check_command-docker,
  test_check_command-machine,
  test_check_command-macos,
  test_credentials_store-docker,
  test_credentials_store-machine,
  test_credentials_store-macos,
  test_credentials_store-docker-custom-tag,
  test_credentials_store-machine-custom-tag,
  test_credentials_store-macos-custom-tag,
  test_hadolint_install,
  publish-machine,
  publish-docker-cache,
  publish-docker-cache-not-found,
  publish-docker-with-buildkit,
  publish-docker-multiple-tags,
  publish-docker-env-var-image-param,
  test_pull,
  test_install_docker_tools-docker-latest,
  test_install_docker_tools-docker-old,
  test_install_docker_tools-macos-latest,
  test_install_docker_tools-macos-old,
  test_install_docker_tools-machine-latest,
  test_install_docker_tools-machine-old,
  test_install_docker_tools-machine-arm,
  test_install_docker_compose-with-checksums,
  test_install_docker_compose-with-sha256,
  test_install_docker_compose-with-checksums-and-sha256,
  test-docker-latest,
  test-docker-old,
  test-macos-latest,
  test-macos-old,
  test-machine-latest,
  test-machine-old,
  test-machine-arm,
  test_build_command_workspace,
  test_build_with_args,
  test_build_bash_substitution
]

filters: &filters
  tags:
    only: /.*/

release-filters: &release-filters
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

orbs:
  build-tools: circleci/build-tools@3.0.0
  docker: {}
  jq: circleci/jq@2.2.0
  node: circleci/node@4.7.0
  orb-tools: circleci/orb-tools@12.0

jobs:
  test:
    parameters:
      executor:
        type: executor
      install_goss:
        type: boolean
        default: true
    executor: << parameters.executor >>
    steps:
      - docker/install_docker
      - docker/install_docker_compose
      - docker/install_dockerize
      - when:
          condition: << parameters.install_goss >>
          steps:
            - docker/install_goss
  test_install_docker_tools:
    parameters:
      executor:
        type: executor
      docker_version:
        type: string
        default: latest
      docker_compose_version:
        type: string
        default: latest
      dockerize_version:
        type: string
        default: latest
      install_goss:
        type: boolean
        default: true
      goss_version:
        type: string
        default: latest
      debug:
        type: boolean
        default: false
      goss_architecture:
        type: enum
        default: amd64
        enum: [amd64, arm64]
    executor: <<parameters.executor>>
    steps:
      - checkout
      - jq/install
      - docker/install_docker_tools:
          install_goss_dgoss: << parameters.install_goss >>
          goss_architecture: << parameters.goss_architecture >>
  test_pull:
    executor: docker-latest
    steps:
      - setup_remote_docker
      - docker/pull:
          images: cimg/base:stable,ubuntu:18.04
      - docker/pull:
          images: cimg/base:stable,cimg/base:not_exists,cimg/go:stable
          ignore_docker_pull_error: true
  test_check_command:
    parameters:
      executor:
        type: executor
      docker_username:
        type: env_var_name
      docker_password:
        type: env_var_name
      use_docker_credentials_store:
        type: boolean
    executor: <<parameters.executor>>
    steps:
      - docker/check:
          docker_username: <<parameters.docker_username>>
          docker_password: <<parameters.docker_password>>
          use_docker_credentials_store: <<parameters.use_docker_credentials_store>>
  test_credentials_store:
    parameters:
      executor:
        type: executor
      helper_name:
        type: enum
        enum: ["", "pass", "osxkeychain"]
        default: ""
      docker_username:
        type: env_var_name
      docker_password:
        type: env_var_name
      release_tag:
        type: string
        default: ""
    executor: <<parameters.executor>>
    steps:
      - docker/install_docker_credential_helper:
          helper_name: <<parameters.helper_name>>
          release_tag: <<parameters.release_tag>>
      - docker/configure_docker_credentials_store:
          helper_name: <<parameters.helper_name>>
      - run:
          name: Test login
          command: |
            LOGIN_RESULT=$(echo "$<<parameters.docker_password>>" \
            | docker login -u "$<<parameters.docker_username>>" --password-stdin)
            set -x
            echo "$LOGIN_RESULT" | grep "Login Succeeded"
            set +x
            if echo "$LOGIN_RESULT" | grep -q "WARNING"; then
            echo "Error - warning found in login result"
            exit 1
            fi
  test_create_workspace:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Description
          command: |
            echo "This step simply creates a file and saves it to a workspace. This tests the attach_at parameter in the build command."
            echo "true" > verify.txt
      - persist_to_workspace:
          root: ./
          paths:
            - verify.txt
  test_build_command_workspace:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker
      - docker/build:
          dockerfile: test.Dockerfile
          image: cpeorbtesting/docker-orb-test
          tag: $CIRCLE_BUILD_NUM-$CIRCLE_SHA1
          attach_at: "./"
      - run:
          name: Check for workspace
          command: |-
            echo "Ensuring workspace was attached."
            if test -f "./verify.txt"; then
              echo "Success"
            else
              echo "Error"
              pwd
              ls
              exit 1
            fi
  test_build_with_args:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker
      - docker/build:
          dockerfile: test3.Dockerfile
          image: cpeorbtesting/docker-orb-test
          tag: $CIRCLE_BUILD_NUM-$CIRCLE_SHA1
          extra_build_args: --build-arg COMMIT_HASH=$CIRCLE_SHA1
  test_build_bash_substitution:
    docker:
      - image: cimg/base:current
    environment:
      DOCKER_ACCOUNT: CPEOrbTesting
      DOCKER_REPO: docker_orb_test
    steps:
      - checkout
      - setup_remote_docker
      - docker/build:
          dockerfile: test3.Dockerfile
          image: ${DOCKER_ACCOUNT,,}/${DOCKER_REPO,,/_/-}
          tag: ${CIRCLE_BUILD_NUM,,}-${CIRCLE_SHA1:0:10}
          extra_build_args: --build-arg COMMIT_HASH=$CIRCLE_SHA1
  test_dockerlint:
    docker:
      - image: cimg/node:17.7.2
    parameters:
      debug:
        type: boolean
        default: false
      dockerfile:
        type: string
        default: "test.Dockerfile"
      treat_warnings_as_errors:
        type: boolean
        default: false
    steps:
      - checkout
      - docker/dockerlint:
          debug: <<parameters.debug>>
          dockerfile: <<parameters.dockerfile>>
          treat_warnings_as_errors: <<parameters.treat_warnings_as_errors>>
  test_install_docker_compose:
    parameters:
      docker_compose_version:
        type: string
        default: latest
        description: >
          Version of `docker-compose` to install, defaults to the latest stable release. If specifying a version other than latest, provide a full release tag, as listed at https://github.com/docker/compose/releases or https://api.github.com/repos/docker/compose/releases, e.g., `1.23.1`.

      install_dir:
        type: string
        default: /usr/local/bin
        description: >
          Directory in which to install `docker-compose`

      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - docker/install_docker
      - docker/install_docker_compose:
          version: << parameters.docker_compose_version>>
          install_dir: << parameters.install_dir>>
  test_hadolint_install:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - checkout
      - docker/hadolint:
          dockerfiles: test.Dockerfile
          ignore_rules: DL4005,DL3008,DL3009,DL3015
          trusted_registries: docker.io,my-company.com:5000
      - run:
          name: Verifying hadolint install
          command: |
            if ! command -v hadolint; then
              echo "hadolint not installed"
              exit 1
            else
              echo "hadolint installed successfully"
              exit 0
            fi
workflows:
  test-deploy:
    jobs:
      - docker/hadolint:
          name: hadolint
          ignore_rules: DL4005,DL3008,DL3009,DL3015,DL3059
          trusted_registries: docker.io,my-company.com:5000
          dockerfiles: test.Dockerfile:test2.Dockerfile
          failure_threshold: none
          filters: *filters
      - test_hadolint_install:
          name: test-install-hadolint-<< matrix.executor >>
          matrix:
            parameters:
              executor: [docker-latest, machine-arm, macos-latest]
          filters: *filters
      - test_dockerlint:
          name: dockerlint
          debug: true
          treat_warnings_as_errors: false
          filters: *filters
      - test_pull:
          filters: *filters
      - test_create_workspace:
          filters: *filters
      - test_build_command_workspace:
          requires:
            - test_create_workspace
          filters: *filters
      - test_build_with_args:
          filters: *filters
      - test_build_bash_substitution:
          filters: *filters

      # begin test_install_docker_compose
      - test_install_docker_compose:
          name: test_install_docker_compose-with-checksums
          executor: docker-latest
          filters: *filters
      - test_install_docker_compose:
          name: test_install_docker_compose-with-sha256
          docker_compose_version: v2.0.1
          executor: docker-latest
          filters: *filters
      - test_install_docker_compose:
          name: test_install_docker_compose-with-checksums-and-sha256
          docker_compose_version: v2.9.0
          executor: docker-latest
          filters: *filters
      # end test_install_docker_compose

      # begin test_check_command
      - test_check_command:
          name: test_check_command-docker
          executor: docker-latest
          context: CPE-orb-docker-testing
          docker_username: DOCKER_USER
          docker_password: DOCKER_PASS
          use_docker_credentials_store: false
          filters: *filters
      - test_check_command:
          name: test_check_command-machine
          executor: machine-latest
          context: CPE-orb-docker-testing
          docker_username: DOCKER_USER
          docker_password: DOCKER_PASS
          use_docker_credentials_store: true
          filters: *filters
      - test_check_command:
          name: test_check_command-macos
          executor: macos-latest
          context: CPE-orb-docker-testing
          docker_username: DOCKER_USER
          docker_password: DOCKER_PASS
          use_docker_credentials_store: true
          pre-steps:
            - docker/install_docker
          filters: *filters
      # end test_check_command

      # begin test_credentials_store
      - test_credentials_store:
          name: test_credentials_store-docker
          executor: docker-latest
          context: CPE-orb-docker-testing
          helper_name: pass
          docker_username: DOCKER_USER
          docker_password: DOCKER_PASS
          filters: *filters
      - test_credentials_store:
          name: test_credentials_store-machine
          executor: machine-latest
          context: CPE-orb-docker-testing
          docker_username: DOCKER_USER
          docker_password: DOCKER_PASS
          filters: *filters
      - test_credentials_store:
          name: test_credentials_store-macos
          executor: macos-latest
          context: CPE-orb-docker-testing
          docker_username: DOCKER_USER
          docker_password: DOCKER_PASS
          pre-steps:
            - docker/install_docker
          filters: *filters
      - test_credentials_store:
          name: test_credentials_store-docker-custom-tag
          executor: docker-latest
          context: CPE-orb-docker-testing
          helper_name: pass
          docker_username: DOCKER_USER
          docker_password: DOCKER_PASS
          release_tag: "v0.6.4"
          filters: *filters
      - test_credentials_store:
          name: test_credentials_store-machine-custom-tag
          executor: machine-latest
          context: CPE-orb-docker-testing
          docker_username: DOCKER_USER
          docker_password: DOCKER_PASS
          release_tag: "v0.6.4"
          filters: *filters
      - test_credentials_store:
          name: test_credentials_store-macos-custom-tag
          executor: macos-latest
          context: CPE-orb-docker-testing
          docker_username: DOCKER_USER
          docker_password: DOCKER_PASS
          release_tag: "v0.6.4"
          pre-steps:
            - docker/install_docker
          filters: *filters
      # end test_credentials_store

      # begin docker/publish
      - docker/publish:
          name: publish-machine
          context: CPE-orb-docker-testing
          dockerfile: test.Dockerfile
          image: cpeorbtesting/docker-orb-test
          tag: $CIRCLE_BUILD_NUM-$CIRCLE_SHA1
          docker_username: DOCKER_USER
          docker_password: DOCKER_PASS
          use_docker_credentials_store: true
          pre-steps:
            # Test that it's OK to invoke the commands twice
            - docker/install_docker_credential_helper
            - docker/configure_docker_credentials_store
          filters: *filters
        # end test_credentials_store
      - docker/publish:
          name: publish-docker
          executor: docker-latest
          context: CPE-orb-docker-testing
          use_remote_docker: true
          dockerfile: test.Dockerfile
          image: cpeorbtesting/docker-orb-test
          tag: $CIRCLE_SHA1
          docker_username: DOCKER_USER
          docker_password: DOCKER_PASS
          use_docker_credentials_store: true
          filters: *filters
      - docker/publish:
          name: publish-docker-with-buildkit
          executor: docker-latest
          context: CPE-orb-docker-testing
          use_remote_docker: true
          remote-docker_version: "20.10.12"
          use_buildkit: true
          dockerfile: test.Dockerfile
          image: cpeorbtesting/docker-orb-test
          tag: $CIRCLE_SHA1
          docker_username: DOCKER_USER
          docker_password: DOCKER_PASS
          use_docker_credentials_store: true
          filters: *filters
      - docker/publish:
          name: publish-docker-cache
          requires:
            - publish-docker
          executor: docker-latest
          context: CPE-orb-docker-testing
          use_remote_docker: true
          dockerfile: test.Dockerfile
          image: cpeorbtesting/docker-orb-test
          tag: $CIRCLE_SHA1
          cache_from: cpeorbtesting/docker-orb-test:$CIRCLE_SHA1
          docker_username: DOCKER_USER
          docker_password: DOCKER_PASS
          pre-steps:
            - docker/install_docker_credential_helper:
              # release_tag: v0.6.3
            - docker/configure_docker_credentials_store:
                helper_name: pass
          filters: *filters
      - docker/publish:
          name: publish-docker-cache-not-found
          executor: docker/docker
          context: CPE-orb-docker-testing
          use_remote_docker: true
          dockerfile: test.Dockerfile
          image: cpeorbtesting/docker-orb-test
          tag: $CIRCLE_SHA1-2
          cache_from: cpeorbtesting/docker-orb-test:not-exists
          docker_username: DOCKER_USER
          docker_password: DOCKER_PASS
          filters: *filters
      - docker/publish:
          name: publish-docker-update_description
          executor: docker-latest
          context: CPE-orb-docker-testing
          use_remote_docker: true
          dockerfile: test.Dockerfile
          image: cpeorbtesting/docker-orb-test
          tag: $CIRCLE_SHA1
          cache_from: cpeorbtesting/docker-orb-test:$CIRCLE_SHA1
          docker_username: DOCKER_USER
          docker_password: DOCKER_PASS
          update_description: true
          filters: *filters
      - docker/publish:
          name: publish-docker-multiple-tags
          executor: docker-latest
          context: CPE-orb-docker-testing
          use_remote_docker: true
          dockerfile: test.Dockerfile
          image: cpeorbtesting/docker-orb-test
          tag: $CIRCLE_SHA1,$CIRCLE_BUILD_NUM
          docker_username: DOCKER_USER
          docker_password: DOCKER_PASS
          use_docker_credentials_store: true
          filters: *filters
      - docker/publish:
          pre-steps:
            - run: echo 'export DOCKER_USERNAME=cpeorbtesting' >> $BASH_ENV
            - run: echo 'export DOCKER_NAME=docker-orb-test' >> $BASH_ENV
          name: publish-docker-env-var-image-param
          executor: docker-latest
          context: CPE-orb-docker-testing
          use_remote_docker: true
          dockerfile: test.Dockerfile
          image: $DOCKER_USERNAME/$DOCKER_NAME
          tag: $CIRCLE_SHA1,$CIRCLE_BUILD_NUM
          docker_username: DOCKER_USER
          docker_password: DOCKER_PASS
          use_docker_credentials_store: true
          filters: *filters
      - docker/publish:
          pre-steps:
            - run:
                name: Export env vars
                command: |
                  echo 'export DOCKER_USERNAME=cpeorbtesting' >> $BASH_ENV
                  echo 'export DOCKER_NAME=docker-orb-test' >> $BASH_ENV
                  echo 'export DOCKERFILE=test.Dockerfile' >> $BASH_ENV
                  echo 'export REGISTRY=docker.io' >> $BASH_ENV
          name: publish-docker-env-var-all-params
          executor: docker-latest
          context: CPE-orb-docker-testing
          use_remote_docker: true
          dockerfile: $DOCKERFILE
          image: $DOCKER_USERNAME/$DOCKER_NAME
          tag: $CIRCLE_SHA1,$CIRCLE_BUILD_NUM
          docker_username: DOCKER_USER
          docker_password: DOCKER_PASS
          use_docker_credentials_store: true
          registry: $REGISTRY
          filters: *filters
      # end docker/publish

      # begin test_install_docker_tools
      - test_install_docker_tools:
          name: test_install_docker_tools-<< matrix.executor >>
          matrix:
            parameters:
              executor: [docker-latest, docker-old, machine-latest, machine-old]
              goss_architecture: [amd64]
          filters: *filters
      - test_install_docker_tools:
          name: test_install_docker_tools-<< matrix.executor >>
          matrix:
            parameters:
              executor: [machine-arm]
              goss_architecture: [arm64]
          filters: *filters
      - test_install_docker_tools:
          name: test_install_docker_tools-<< matrix.executor >>
          matrix:
            parameters:
              executor: [macos-latest, macos-old]
          install_goss: false
          filters: *filters
      # end test_install_docker_tools

      # begin test
      - test:
          name: test-<< matrix.executor >>
          matrix:
            parameters:
              executor: [docker-latest, docker-old, machine-latest, machine-old]
          filters: *filters
      - test:
          name: test-<< matrix.executor >>
          matrix:
            parameters:
              executor: [macos-latest, macos-old, machine-arm]
          install_goss: false
          filters: *filters
      # end test

      - orb-tools/pack:
          filters: *release-filters
      - orb-tools/publish:
          orb_name: circleci/docker
          vcs_type: << pipeline.project.type >>
          pub_type: production
          requires: *promotion_requires
          context: orb-publisher
          github_token: GHI_TOKEN
          filters: *release-filters
executors:
  macos-old:
    macos:
      xcode: 14.3.1
    resource_class: macos.x86.medium.gen2
  macos-latest:
    macos:
      xcode: 15.2.0
      resource_class: macos.x86.medium.gen2
  docker-old:
    docker:
      - image: cimg/base:2020.08-20.04
  docker-latest:
    docker:
      - image: cimg/base:stable
  machine-old:
    machine:
      image: ubuntu-2004:202010-01
  machine-latest:
    machine:
      image: ubuntu-2004:current
  machine-arm:
    resource_class: arm.medium
    machine:
      image: ubuntu-2004:202101-01
# VS Code Extension Version: 1.3.0
