description: >
  Build and tag a Docker image

parameters:
  step-name:
    type: string
    default: Docker build
    description: Specify a custom step name for this command, if desired

  dockerfile:
    type: string
    default: Dockerfile
    description: Name of dockerfile to use, defaults to Dockerfile

  path:
    type: string
    default: .
    description: >
      Path to the directory containing your Dockerfile,
      defaults to . (working directory)

  lint-dockerfile:
    type: boolean
    default: false
    description: >
      Lint Dockerfile before building?

  treat-warnings-as-errors:
    type: boolean
    default: false
    description: >
      If linting Dockerfile, treat linting warnings as errors? (would trigger
      an exit code and fail the CircleCI job)

  registry:
    type: string
    default: docker.io
    description: >
      Name of registry to use, defaults to docker.io

  image:
    type: string
    description: Name of image to build

  tag:
    type: string
    default: $CIRCLE_SHA1
    description: Image tag, defaults to the value of $CIRCLE_SHA1

  extra_build_args:
    type: string
    default: ""
    description: >
      Extra flags to pass to docker build. For examples, see
      https://docs.docker.com/engine/reference/commandline/build

  cache_from:
    type: string
    default: ""
    description: >
      Comma-separated list of images, images will first be pulled, then
      passed as the --cache-from build argument
      https://docs.docker.com/engine/reference/commandline/build/

  debug:
    type: boolean
    default: false
    description: >
      Extra output for orb developers

  attach-at:
    type: string
    default: ""
    description: >
      Provide a path if you wish to attach a workspace. Use `./` for the working directory.
      `attach_workspace` attached location - where to mount folder/files that were `persist_to_workspace` in a previous step.
      https://circleci.com/docs/2.0/configuration-reference/#attach_workspace

  docker-context:
    type: string
    default: .
    description: >
      Path to the directory containing your build context,
      defaults to . (working directory)

  no_output_timeout:
    type: string
    default: "10m"
    description: >
      Pass through a default timeout if your Docker build does not output
      anything for more than 10 minutes.

  use-buildkit:
    type: boolean
    default: false
    description: >
      Use buildkit to build the image.
      Available on Docker >= 18.09.0
      https://docs.docker.com/develop/develop-images/build_enhancements/

steps:
  - when:
      condition: <<parameters.lint-dockerfile>>
      steps:
        - dockerlint:
            treat-warnings-as-errors: <<parameters.treat-warnings-as-errors>>
            dockerfile: <<parameters.path>>/<<parameters.dockerfile>>
            debug: <<parameters.debug>>

  - when:
      condition: <<parameters.use-buildkit>>
      steps:
        - run: echo 'export DOCKER_BUILDKIT=1' >> $BASH_ENV

  - when:
      condition: <<parameters.extra_build_args>>
      steps:
        - run: echo 'PARAM_EXTRA_BUILD_ARGS="<<parameters.extra_build_args>>"' >> $BASH_ENV

  - when:
      condition: <<parameters.attach-at>>
      steps:
        - attach_workspace:
              at: <<parameters.attach-at>>

  - run:
      name: <<parameters.step-name>>
      no_output_timeout: << parameters.no_output_timeout >>
      environment:
        PARAM_CACHE_FROM: <<parameters.cache_from>>
        PARAM_DOCKER_CONTEXT: <<parameters.docker-context>>
        PARAM_DOCKERFILE_NAME: <<parameters.dockerfile>>
        PARAM_DOCKERFILE_PATH: <<parameters.path>>
        PARAM_IMAGE: <<parameters.image>>
        PARAM_REGISTRY: <<parameters.registry>>
        PARAM_TAG: <<parameters.tag>>
        PARAM_USE_BUILDKIT: <<parameters.use-buildkit>>
        SCRIPT_UTILS: <<include(scripts/utils.sh)>>
      command: <<include(scripts/build.sh)>>
