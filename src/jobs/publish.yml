description: Build and optionally deploy a Docker image

executor: <<parameters.executor>>

parameters:
  executor:
    type: executor
    default: machine
    description: >
      Executor to use for this job, defaults to this orb's `machine`
      executor

  use_remote_docker:
    type: boolean
    default: false
    description: >
      Setup a remote Docker engine for Docker commands? Only required
      if using a Docker-based executor

  remote_docker_version:
    type: string
    default: "default"
    description: >
      Pick remote Docker engine version.
      Available versions can be found at: https://circleci.com/docs/2.0/building-docker-images/#docker_version.
      Must be >= 18.09 for BuildKit support.

  remote_docker_dlc:
    type: boolean
    default: false
    description: >
      Enable docker layer caching if using remote Docker engine.
      Defaults to false.

  dockerfile:
    type: string
    default: Dockerfile
    description: Name of dockerfile to use, defaults to Dockerfile

  readme:
    type: string
    default: README.md
    description: Name of the file containing the image description to update, defaults to README.md

  path:
    type: string
    default: .
    description: >
      Path to the directory containing your Dockerfile,
      defaults to . (working directory)

  lint_dockerfile:
    type: boolean
    default: false
    description: >
      Lint Dockerfile before building?

  treat_warnings_as_errors:
    type: boolean
    default: false
    description: >
      If linting Dockerfile, treat linting warnings as errors (would trigger
      an exist code and fail the CircleCI job)?

  image:
    type: string
    description: Name of image to build

  tag:
    type: string
    default: $CIRCLE_SHA1
    description: Comma-separated list of image tags, defaults to the value of $CIRCLE_SHA1

  registry:
    type: string
    default: docker.io
    description: >
      Name of registry to use, defaults to docker.io

  use_docker_credentials_store:
    type: boolean
    default: false
    description: >
      Configure Docker to use a credentials store.
      This option is only supported on Ubuntu/Debian platforms.

  extra_build_args:
    type: string
    default: ""
    description: >
      Extra flags to pass to docker build. For examples, see
      https://docs.docker.com/engine/reference/commandline/build
      Pass the desired args using an equal sign (=) instead of an space.
      For example, --build-arg=ARG1=value, instead of --build-arg ARG1=vallue.

  cache_from:
    type: string
    default: ""
    description: >
      Comma-separated list of images to pull before build for --cache-from
      This parameter only support registry type, the accepted syntax is:
      cache_from: user/app:cache,user/app2:cache2

  cache_to:
    type: string
    default: ""
    description: >
      Comman-separated list of images where cache will be pushed to.
      This parameter only support registry type, the accepted syntax is:
      cache_to: user/app:cache,user/app2:cache2

  after_checkout:
    description: Optional steps to run after checking out the code
    type: steps
    default: []

  before_build:
    description: Optional steps to run before building the Docker image
    type: steps
    default: []

  after_build:
    description: Optional steps to run after building the Docker image
    type: steps
    default: []

  deploy:
    description: Push the image to a registry?
    type: boolean
    default: true

  update_description:
    description: Update the image description on Docker Hub?
    type: boolean
    default: false # Defaults to false for backwards compatibility.

  docker_username:
    type: env_var_name
    default: DOCKER_LOGIN
    description: >
      Name of environment variable storing your Docker username

  docker_password:
    type: env_var_name
    default: DOCKER_PASSWORD
    description: >
      Name of environment variable storing your Docker password

  attach_at:
    type: string
    default: ""
    description: >
      Provide a path if you wish to attach a workspace. Use `./` for the working directory.
      `attach_workspace` attached location - where to mount folder/files that were `persist_to_workspace` in a previous step.
      https://circleci.com/docs/2.0/configuration-reference/#attach_workspace

  docker_context:
    type: string
    default: .
    description: >
      Path to the directory containing your build context,
      defaults to . (working directory)

  use_buildkit:
    type: boolean
    default: false
    description: >
      Use buildkit to build the image.
      Available on Docker >= 18.09.0
      https://docs.docker.com/develop/develop-images/build_enhancements/

steps:
  - checkout

  - when:
      condition: <<parameters.after_checkout>>
      steps: <<parameters.after_checkout>>

  - when:
      condition: <<parameters.use_remote_docker>>
      steps:
        - setup_remote_docker:
            version: <<parameters.remote_docker_version>>
            docker_layer_caching: <<parameters.remote_docker_dlc>>

  - when:
      condition: <<parameters.attach_at>>
      steps:
        - attach_workspace:
              at: <<parameters.attach_at>>

  - when:
      condition: <<parameters.deploy>>
      steps:
        - check:
            registry: <<parameters.registry>>
            docker_username: <<parameters.docker_username>>
            docker_password: <<parameters.docker_password>>
            use_docker_credentials_store: <<parameters.use_docker_credentials_store>>

  - when:
      condition: <<parameters.before_build>>
      steps: <<parameters.before_build>>

  - build:
      dockerfile: <<parameters.dockerfile>>
      path: <<parameters.path>>
      docker_context: <<parameters.docker_context>>
      registry: <<parameters.registry>>
      image: <<parameters.image>>
      tag: <<parameters.tag>>
      cache_from: <<parameters.cache_from>>
      cache_to: <<parameters.cache_to>>
      extra_build_args: <<parameters.extra_build_args>>
      lint_dockerfile: <<parameters.lint_dockerfile>>
      treat_warnings_as_errors: <<parameters.treat_warnings_as_errors>>
      use_buildkit: <<parameters.use_buildkit>>

  - when:
      condition: <<parameters.after_build>>
      steps: <<parameters.after_build>>

  - when:
      condition: <<parameters.deploy>>
      steps:
        - push:
            registry: <<parameters.registry>>
            image: <<parameters.image>>
            tag: <<parameters.tag>>

  - when:
      condition: <<parameters.update_description>>
      steps:
        - update_description:
            readme: <<parameters.readme>>
            path: <<parameters.path>>
            registry: <<parameters.registry>>
            image: <<parameters.image>>
            docker_username: <<parameters.docker_username>>
            docker_password: <<parameters.docker_password>>
