description: Build and optionally deploy a Docker image

executor: <<parameters.executor>>

parameters:
  executor:
    type: executor
    default: machine
    description: >
      Executor to use for this job, defaults to this orb's `machine`
      executor

  use-remote-docker:
    type: boolean
    default: false
    description: >
      Setup a remote Docker engine for Docker commands? Only required
      if using a Docker-based executor

  remote-docker-dlc:
    type: boolean
    default: false
    description: >
     Enable docker layer caching if using remote Docker engine.
     Defaults to false.

  dockerfile:
    type: string
    default: Dockerfile
    description: Name of dockerfile to use, defaults to Dockerfile

  path:
    type: string
    default: .
    description: >
      Path to the directory containing your Dockerfile and build context,
      defaults to . (working directory)

  lint-dockerfile:
    type: boolean
    default: false
    description: >
      Lint Dockerfile before building?

  treat-warnings-as-errors:
    type: boolean
    default: false
    description: >
     If linting Dockerfile, treat linting warnings as errors (would trigger
     an exist code and fail the CircleCI job)?

  image:
    type: string
    description: Name of image to build

  tag:
    type: string
    default: $CIRCLE_SHA1
    description: Comma-separated list of image tags, defaults to the value of $CIRCLE_SHA1

  registry:
    type: string
    default: docker.io
    description: >
      Name of registry to use, defaults to docker.io

  use-docker-credentials-store:
    type: boolean
    default: false
    description: >
      Configure Docker to use a credentials store.
      This option is only supported on Ubuntu/Debian platforms.

  extra_build_args:
    type: string
    default: ""
    description: >
      Extra flags to pass to docker build. For examples, see
      https://docs.docker.com/engine/reference/commandline/build

  cache_from:
    type: string
    default: ""
    description: >
      Comma-separated list of images to pull before build for --cache-from
      https://docs.docker.com/engine/reference/commandline/build/

  after_checkout:
    description: Optional steps to run after checking out the code
    type: steps
    default: []

  before_build:
    description: Optional steps to run before building the Docker image
    type: steps
    default: []

  after_build:
    description: Optional steps to run after building the Docker image
    type: steps
    default: []

  deploy:
    description: Push the image to a registry?
    type: boolean
    default: true

  docker-username:
    type: env_var_name
    default: DOCKER_LOGIN
    description: >
      Name of environment variable storing your Docker username

  docker-password:
    type: env_var_name
    default: DOCKER_PASSWORD
    description: >
      Name of environment variable storing your Docker password

steps:
  - checkout

  - when:
      name: Run after_checkout lifecycle hook steps
      condition: <<parameters.after_checkout>>
      steps: <<parameters.after_checkout>>

  - when:
      condition: <<parameters.use-remote-docker>>
      steps:
        - setup_remote_docker:
            docker_layer_caching: <<parameters.remote-docker-dlc>>

  - when:
      condition: <<parameters.deploy>>
      steps:
        - check:
            registry: <<parameters.registry>>
            docker-username: <<parameters.docker-username>>
            docker-password: <<parameters.docker-password>>
            use-docker-credentials-store: <<parameters.use-docker-credentials-store>>

  - when:
      name: Run before_build lifecycle hook steps
      condition: <<parameters.before_build>>
      steps: <<parameters.before_build>>

  - build:
      dockerfile: <<parameters.dockerfile>>
      path: <<parameters.path>>
      registry: <<parameters.registry>>
      image: <<parameters.image>>
      tag: <<parameters.tag>>
      cache_from: <<parameters.cache_from>>
      extra_build_args: <<parameters.extra_build_args>>
      lint-dockerfile: <<parameters.lint-dockerfile>>
      treat-warnings-as-errors: <<parameters.treat-warnings-as-errors>>

  - when:
      name: Run after_build lifecycle hook steps
      condition: <<parameters.after_build>>
      steps: <<parameters.after_build>>

  - when:
      condition: <<parameters.deploy>>
      steps:
        - push:
            registry: <<parameters.registry>>
            image: <<parameters.image>>
            tag: <<parameters.tag>>
