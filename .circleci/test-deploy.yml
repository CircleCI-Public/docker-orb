version: 2.1

promotion_requires: &promotion_requires
  [
    hadolint,
    orb-tools/pack,
    test-check-command-docker,
    test-check-command-machine,
    test-check-command-macos,
    test-check-command-machine-arm,
    test-credentials-store-docker,
    test-credentials-store-machine,
    test-credentials-store-macos,
    test-credentials-store-machine-arm,
    test-credentials-store-docker-custom-tag,
    test-credentials-store-machine-custom-tag,
    test-credentials-store-macos-custom-tag,
    test-hadolint-install,
    publish-machine,
    publish-docker-cache,
    publish-docker-cache-not-found,
    publish-docker-with-buildkit,
    publish-docker-multiple-tags,
    publish-docker-env-var-image-param,
    test-pull,
    integration-test-secret-args,
    test-install_docker_tools,
    test-install_docker_tools-macos,
    test-install_docker_tools-arm64,
    test-install_docker_compose-with-checksums,
    test-install_docker_compose-with-sha256,
    test-install_docker_compose-with-checksums-and-sha256,
    test,
    test-arm,
    test-build-command-workspace,
    test-build-with-args,
    test-build-bash-substitution
  ]

filters: &filters
  tags:
    only: /.*/

orbs:
  docker: {}
  jq: circleci/jq@3.0.2
  orb-tools: circleci/orb-tools@12.3.1
jobs:
  build-multispace-args:
    machine:
      image: ubuntu-2004:current
    steps:
      - checkout
      - docker/install_docker
      - docker/build:
          dockerfile: test3.Dockerfile
          image: docker-orb-test-temporal
          tag: tempora-test
          extra_build_args: --build-arg=COMMIT_HASH=$CIRCLE_SHA1 --build-arg=CARG='i am a good parameter' --build-arg=DATE=$(date +%F)
  test:
    parameters:
      executor:
        type: executor
      install_goss:
        type: boolean
        default: true
    executor: << parameters.executor >>
    steps:
      - docker/install_docker
      - docker/install_docker_compose
      - docker/install_dockerize
      - when:
          condition: << parameters.install_goss >>
          steps:
            - docker/install_goss
  test-install_docker_tools:
    parameters:
      executor:
        type: executor
      docker_version:
        type: string
        default: latest
      docker_compose_version:
        type: string
        default: latest
      dockerize_version:
        type: string
        default: latest
      install_goss:
        type: boolean
        default: true
      goss_version:
        type: string
        default: latest
      debug:
        type: boolean
        default: false
      goss_architecture:
        type: enum
        default: amd64
        enum: [amd64, arm64]
    executor: <<parameters.executor>>
    steps:
      - checkout
      - jq/install
      - docker/install_docker_tools:
          install_goss_dgoss: << parameters.install_goss >>
          goss_architecture: << parameters.goss_architecture >>
  test-pull:
    executor: docker-latest
    steps:
      - setup_remote_docker
      - docker/pull:
          images: cimg/base:stable,ubuntu:18.04
      - docker/pull:
          images: cimg/base:stable,cimg/base:not_exists,cimg/go:stable
          ignore_docker_pull_error: true
  test-check-command:
    parameters:
      executor:
        type: executor
      docker_username:
        type: env_var_name
      docker_password:
        type: env_var_name
      use_docker_credentials_store:
        type: boolean
      arch:
        default: amd64
        type: enum
        enum: [amd64, arm64]
    executor: <<parameters.executor>>
    steps:
      - docker/check:
          docker_username: <<parameters.docker_username>>
          docker_password: <<parameters.docker_password>>
          use_docker_credentials_store: <<parameters.use_docker_credentials_store>>
          arch: <<parameters.arch>>
  test-credentials-store:
    parameters:
      executor:
        type: executor
      helper_name:
        type: enum
        enum: ["", "pass", "osxkeychain"]
        default: ""
      docker_username:
        type: env_var_name
      docker_password:
        type: env_var_name
      release_tag:
        type: string
        default: ""
      arch:
        default: amd64
        type: enum
        enum: [amd64, arm64]
    executor: <<parameters.executor>>
    steps:
      - docker/install_docker_credential_helper:
          helper_name: <<parameters.helper_name>>
          release_tag: <<parameters.release_tag>>
          arch: <<parameters.arch>>
      - docker/configure_docker_credentials_store:
          helper_name: <<parameters.helper_name>>
      - run:
          name: Test login
          command: |
            LOGIN_RESULT=$(echo "$<<parameters.docker_password>>" \
            | docker login -u "$<<parameters.docker_username>>" --password-stdin)
            set -x
            echo "$LOGIN_RESULT" | grep "Login Succeeded"
            set +x
            if echo "$LOGIN_RESULT" | grep -q "WARNING"; then
            echo "Error - warning found in login result"
            exit 1
            fi
  test-create-workspace:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Description
          command: |
            echo "This step simply creates a file and saves it to a workspace. This tests the attach_at parameter in the build command."
            echo "true" > verify.txt
      - persist_to_workspace:
          root: ./
          paths:
            - verify.txt
  test-build-command-workspace:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker
      - docker/build:
          dockerfile: test.Dockerfile
          image: ccitest/docker-orb-test
          tag: $CIRCLE_BUILD_NUM-$CIRCLE_SHA1
          attach_at: "./"
      - run:
          name: Check for workspace
          command: |-
            echo "Ensuring workspace was attached."
            if test -f "./verify.txt"; then
              echo "Success"
            else
              echo "Error"
              pwd
              ls
              exit 1
            fi
  test-build-with-args:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker
      - docker/build:
          dockerfile: test3.Dockerfile
          image: ccitest/docker-orb-test
          tag: $CIRCLE_BUILD_NUM-$CIRCLE_SHA1
          extra_build_args: --build-arg COMMIT_HASH=$CIRCLE_SHA1
  integration-test-secret-args:
    executor: docker/docker
    steps:
      - checkout
      - setup_remote_docker
      - run: echo 'export COMPOSER_AUTH=SECRET_VALUE' >> $BASH_ENV
      - docker/build:
          dockerfile: test5.Dockerfile
          image: ccitest/docker-orb-test-secret
          tag: $CIRCLE_BUILD_NUM-$CIRCLE_SHA1
          # use_buildkit: true
          extra_build_args: "--secret id=COMPOSER_AUTH,env=COMPOSER_AUTH --progress=plain --no-cache"
  test-build-bash-substitution:
    docker:
      - image: cimg/base:current
    environment:
      DOCKER_ACCOUNT: circlecipublicimagetesting
      DOCKER_REPO: docker_orb_test
    steps:
      - checkout
      - setup_remote_docker
      - docker/build:
          dockerfile: test3.Dockerfile
          image: ${DOCKER_ACCOUNT,,}/${DOCKER_REPO,,/_/-}
          tag: ${CIRCLE_BUILD_NUM,,}-${CIRCLE_SHA1:0:10}
          extra_build_args: --build-arg COMMIT_HASH=$CIRCLE_SHA1
  test-install_docker_compose:
    parameters:
      docker_compose_version:
        type: string
        default: latest
        description: >
          Version of `docker-compose` to install, defaults to the latest stable release. If specifying a version other than latest, provide a full release tag, as listed at https://github.com/docker/compose/releases or https://api.github.com/repos/docker/compose/releases, e.g., `1.23.1`.

      install_dir:
        type: string
        default: /usr/local/bin
        description: >
          Directory in which to install `docker-compose`

      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - docker/install_docker
      - docker/install_docker_compose:
          version: << parameters.docker_compose_version>>
          install_dir: << parameters.install_dir>>
  test-hadolint-install:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - checkout
      - docker/hadolint:
          dockerfiles: test.Dockerfile
          ignore_rules: DL4005,DL3008,DL3009,DL3015
          trusted_registries: docker.io,my-company.com:5000
      - run:
          name: Verifying hadolint install
          command: |
            if ! command -v hadolint; then
              echo "hadolint not installed"
              exit 1
            else
              echo "hadolint installed successfully"
              exit 0
            fi
workflows:
  test-deploy:
    jobs:
      - build-multispace-args
      - integration-test-secret-args
      - docker/hadolint:
          name: hadolint
          ignore_rules: DL4005,DL3008,DL3009,DL3015,DL3059
          trusted_registries: docker.io,my-company.com:5000
          dockerfiles: test.Dockerfile:test2.Dockerfile
          failure_threshold: none
          filters: *filters
      - test-hadolint-install:
          name: test-install-hadolint-<< matrix.executor >>
          matrix:
            parameters:
              executor: [docker-latest, machine-arm, macos-latest]
          filters: *filters
      - test-pull:
          filters: *filters
      - test-create-workspace:
          filters: *filters
      - test-build-command-workspace:
          requires:
            - test-create-workspace
          filters: *filters
      - test-build-with-args:
          filters: *filters
      - test-build-bash-substitution:
          filters: *filters
      - test-install_docker_compose:
          name: test-install_docker_compose-with-checksums
          executor: docker-latest
          filters: *filters
      - test-install_docker_compose:
          name: test-install_docker_compose-with-sha256
          docker_compose_version: v2.0.1
          executor: docker-latest
          filters: *filters
      - test-install_docker_compose:
          name: test-install_docker_compose-with-checksums-and-sha256
          docker_compose_version: v2.9.0
          executor: docker-latest
          filters: *filters
      - test-check-command:
          name: test-check-command-docker
          executor: docker-latest
          context: cimg-docker-image-building
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          use_docker_credentials_store: false
          filters: *filters
      - test-check-command:
          name: test-check-command-machine
          executor: machine-latest
          context: cimg-docker-image-building
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          use_docker_credentials_store: true
          filters: *filters
      - test-check-command:
          name: test-check-command-machine-arm
          executor: machine-arm
          context: cimg-docker-image-building
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          arch: arm64
          use_docker_credentials_store: true
          filters: *filters
      - test-check-command:
          name: test-check-command-macos
          executor: macos-latest
          context: cimg-docker-image-building
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          use_docker_credentials_store: true
          pre-steps:
            - docker/install_docker
          filters: *filters
      - test-credentials-store:
          name: test-credentials-store-docker
          executor: docker-latest
          context: cimg-docker-image-building
          helper_name: pass
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          filters: *filters
      - test-credentials-store:
          name: test-credentials-store-machine
          executor: machine-latest
          context: cimg-docker-image-building
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          filters: *filters
      - test-credentials-store:
          name: test-credentials-store-machine-arm
          executor: machine-arm
          context: cimg-docker-image-building
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          arch: arm64
          filters: *filters
      - test-credentials-store:
          name: test-credentials-store-macos
          executor: macos-latest
          context: cimg-docker-image-building
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          pre-steps:
            - docker/install_docker
          filters: *filters
      - test-credentials-store:
          name: test-credentials-store-docker-custom-tag
          executor: docker-latest
          context: cimg-docker-image-building
          helper_name: pass
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          release_tag: "v0.6.4"
          filters: *filters
      - test-credentials-store:
          name: test-credentials-store-machine-custom-tag
          executor: machine-latest
          context: cimg-docker-image-building
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          release_tag: "v0.6.4"
          filters: *filters
      - test-credentials-store:
          name: test-credentials-store-macos-custom-tag
          executor: macos-latest
          context: cimg-docker-image-building
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          release_tag: "v0.6.4"
          pre-steps:
            - docker/install_docker
          filters: *filters
      - docker/publish:
          name: publish-machine
          context: cimg-docker-image-building
          dockerfile: test.Dockerfile
          image: ccitest/docker-orb-test
          tag: $CIRCLE_BUILD_NUM-$CIRCLE_SHA1
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          use_docker_credentials_store: true
          pre-steps:
            # Test that it's OK to invoke the commands twice
            - docker/install_docker_credential_helper
            - docker/configure_docker_credentials_store
          filters: *filters
      - docker/publish:
          name: publish-docker
          executor: docker-latest
          context: cimg-docker-image-building
          use_remote_docker: true
          dockerfile: test.Dockerfile
          image: ccitest/docker-orb-test
          tag: $CIRCLE_SHA1
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          use_docker_credentials_store: true
          filters: *filters
      - docker/publish:
          name: publish-docker-with-buildkit
          executor: docker-latest
          context: cimg-docker-image-building
          use_remote_docker: true
          use_buildkit: true
          dockerfile: test.Dockerfile
          image: ccitest/docker-orb-test
          tag: $CIRCLE_SHA1
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          use_docker_credentials_store: true
          filters: *filters
      - docker/publish:
          name: publish-docker-save-cache
          executor: machine-latest
          context: cimg-docker-image-building
          dockerfile: test2.Dockerfile
          image: ccitest/docker-orb-test
          tag: $CIRCLE_SHA1
          cache_to: ccitest/docker-orb-test:cache-big,ccitest/docker-orb-test:cache2-big
          cache_from: ccitest/docker-orb-test:cache2-big
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          pre-steps:
            - docker/install_docker_credential_helper
            - docker/configure_docker_credentials_store:
                helper_name: pass
          filters: *filters
      - docker/publish:
          name: publish-docker-cache
          requires:
            - publish-docker-save-cache
          executor: machine-latest
          context: cimg-docker-image-building
          dockerfile: test2.Dockerfile
          image: ccitest/docker-orb-test
          tag: $CIRCLE_SHA1
          cache_from: ccitest/docker-orb-test:cache-big
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          pre-steps:
            - docker/install_docker_credential_helper:
              # release_tag: v0.6.3
            - docker/configure_docker_credentials_store:
                helper_name: pass
          filters: *filters
      - docker/publish:
          name: publish-docker-cache-not-found
          executor: docker/docker
          context: cimg-docker-image-building
          use_remote_docker: true
          dockerfile: test.Dockerfile
          image: ccitest/docker-orb-test
          tag: $CIRCLE_SHA1-2
          cache_from: ccitest/docker-orb-test:not-exists
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          filters: *filters
      - docker/publish:
          name: publish-docker-update_description
          executor: docker-latest
          context: cimg-docker-image-building
          use_remote_docker: true
          dockerfile: test.Dockerfile
          image: ccitest/docker-orb-test
          tag: $CIRCLE_SHA1
          cache_from: ccitest/docker-orb-test:$CIRCLE_SHA1
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          update_description: true
          filters: *filters
      - docker/publish:
          name: publish-docker-multiple-tags
          executor: docker-latest
          context: cimg-docker-image-building
          use_remote_docker: true
          dockerfile: test.Dockerfile
          image: ccitest/docker-orb-test
          tag: $CIRCLE_SHA1,$CIRCLE_BUILD_NUM
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          use_docker_credentials_store: true
          filters: *filters
      - docker/publish:
          pre-steps:
            - run: echo 'export DOCKER_USERNAME=circlecipublicimagetesting' >> $BASH_ENV
            - run: echo 'export DOCKER_NAME=docker-orb-test' >> $BASH_ENV
          name: publish-docker-env-var-image-param
          executor: docker-latest
          context: cimg-docker-image-building
          use_remote_docker: true
          dockerfile: test.Dockerfile
          image: ccitest/$DOCKER_NAME
          tag: $CIRCLE_SHA1,$CIRCLE_BUILD_NUM
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          use_docker_credentials_store: true
          filters: *filters
      - docker/publish:
          pre-steps:
            - run:
                name: Export env vars
                command: |
                  echo 'export DOCKER_USERNAME=circlecipublicimagetesting' >> $BASH_ENV
                  echo 'export DOCKER_NAME=docker-orb-test' >> $BASH_ENV
                  echo 'export DOCKERFILE=test.Dockerfile' >> $BASH_ENV
                  echo 'export REGISTRY=docker.io' >> $BASH_ENV
          name: publish-docker-env-var-all-params
          executor: docker-latest
          context: cimg-docker-image-building
          use_remote_docker: true
          dockerfile: $DOCKERFILE
          image: ccitest/$DOCKER_NAME
          tag: $CIRCLE_SHA1,$CIRCLE_BUILD_NUM
          docker_username: DOCKER_USER
          docker_password: DOCKER_TOKEN
          use_docker_credentials_store: true
          registry: $REGISTRY
          filters: *filters
      - test-install_docker_tools:
          name: test-install_docker_tools-<< matrix.executor >>
          matrix:
            alias: test-install_docker_tools
            parameters:
              executor: [docker-latest, docker-old, machine-latest, machine-old]
              goss_architecture: [amd64]
          filters: *filters
      - test-install_docker_tools:
          name: test-install_docker_tools-<< matrix.executor >>
          matrix:
            alias: test-install_docker_tools-arm64
            parameters:
              executor: [machine-arm]
              goss_architecture: [arm64]
          filters: *filters
      - test-install_docker_tools:
          name: test-install_docker_tools-<< matrix.executor >>
          matrix:
            alias: test-install_docker_tools-macos
            parameters:
              executor: [macos-latest]
          install_goss: false
          filters: *filters
      - test:
          name: test-<< matrix.executor >>
          matrix:
            alias: test
            parameters:
              executor: [docker-latest, docker-old, machine-latest, machine-old]
          filters: *filters
      - test:
          name: test-<< matrix.executor >>
          matrix:
            alias: test-arm
            parameters:
              executor: [macos-latest, machine-arm]
          install_goss: false
          filters: *filters
      - orb-tools/pack:
          filters: *filters
      - orb-tools/publish:
          orb-name: circleci/docker
          vcs-type: << pipeline.project.type >>
          pub-type: production
          requires: *promotion_requires
          context: orb-publisher
          github-token: GHI_TOKEN
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
executors:
  macos-latest:
    macos:
      xcode: 16.2.0
  docker-old:
    docker:
      - image: cimg/base:edge-24.04
  docker-latest:
    docker:
      - image: cimg/base:stable
  machine-old:
    machine:
      image: ubuntu-2404:current
  machine-latest:
    machine:
      image: ubuntu-2404:current
  machine-arm:
    resource_class: arm.medium
    machine:
      image: ubuntu-2404:current
